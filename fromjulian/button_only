
#include <Servo.h>

// ─── Pin assignments ─────────────────────────────────────────────────────────
#define BUTTON_PIN   2   // push‑button
#define CLAMP_PIN1   5   // right clamp servo
#define CLAMP_PIN2   8   // left  clamp servo
#define CLAMP_PIN3   3   // page‑flipper servo
#define LED_BUILTIN 13   // on‑board LED

const int wheelServoIn1 = 6;
const int wheelServoIn2 = 7;
const int enablePin     = 4;

// Ranger (unused for now)
const int trigPin = 14;
const int echoPin = 15;

// ─── Servo objects ───────────────────────────────────────────────────────────
Servo clampServo1;
Servo clampServo2;
Servo flipServo;

// ─── Clamp control ───────────────────────────────────────────────────────────
const int clamp1Deadzone = 3;
int lastClamp1Pos        = -1;

// ─── Flipper motion parameters ───────────────────────────────────────────────
int  flipCurrent       = 170;   // where the flipper actually is
int  flipEnd           = 170;   // where we want it to go
const int deadzone     = 10;    // when we consider the target “reached”
const int maxFlipSpeed = 15;    // degrees per step (far from target)
const int minFlipSpeed = 1;     // degrees per step (close to target)
const int flipThreshold = 15;   // distance that triggers slow speed
const int wheelTime = 800;     // time for the wheel spinning

const unsigned long flipInterval = 20;   // ms between incremental moves
unsigned long       lastFlipUpdate = 0;

// ─── State machine for the flipper ───────────────────────────────────────────
enum FlipState { IDLE, DOWN, PAUSE, UP };
FlipState flipState = IDLE;

const unsigned long flipPause   = 500;  // how long to wait at the bottom (ms)
const unsigned long clampSettle = 750;   // **how long to wait after clamps close (ms)**
unsigned long       pauseStart  = 0;     // when the pause began

// ─── Button state tracking ───────────────────────────────────────────────────
bool lastButtonState = HIGH;

// ─────────────────────────────────────────────────────────────────────────────
void setup() {
  Serial.begin(9600);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(LED_BUILTIN, OUTPUT);

  clampServo1.attach(CLAMP_PIN1);
  setClampServo1(80);          // default grip angle
  clampServo2.attach(CLAMP_PIN2);
  clampServo2.write(100);      // default grip angle

  flipServo.attach(CLAMP_PIN3);
  flipServo.write(flipCurrent);

  pinMode(enablePin,      OUTPUT);
  pinMode(wheelServoIn1,  OUTPUT);
  pinMode(wheelServoIn2,  OUTPUT);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  Serial.println("Setup complete. Waiting for button press…");
}

// ─────────────────────────────────────────────────────────────────────────────
void loop() {
  bool currentButtonState = digitalRead(BUTTON_PIN);

  // ── Button edge: start a page‑turn cycle ───────────────────────────────────
  if (lastButtonState == HIGH && currentButtonState == LOW && flipState == IDLE) {
    Serial.println("Button pressed – starting sequence");
    digitalWrite(LED_BUILTIN, HIGH);

    // 1) Lift clamps
    Serial.println("Lifting clamps");
    setClampServo1(160);
    clampServo2.write(0);
    delay(350);                        // fine to block here – nothing else yet

    // 2) Spin wheel motor
    Serial.println("Spinning wheel motor");
    digitalWrite(wheelServoIn1, HIGH);
    digitalWrite(wheelServoIn2, LOW);
    analogWrite(enablePin, 180);
    delay(wheelTime);
    digitalWrite(wheelServoIn1, LOW);
    digitalWrite(wheelServoIn2, LOW);
    analogWrite(enablePin, 0);
    Serial.println("Motor stopped");

    // 3) Start flipper moving down
    Serial.println("Beginning flip down");
    flipEnd        = 0;                // bottom position
    flipState      = DOWN;
    lastFlipUpdate = millis();
  }
  lastButtonState = currentButtonState;

  // ── Handle flipper state machine ───────────────────────────────────────────
  if (flipState != IDLE && millis() - lastFlipUpdate >= flipInterval) {
    lastFlipUpdate = millis();

    switch (flipState) {

      // ── Moving DOWN ────────────────────────────────────────────────────────
      case DOWN:
        if (moveTowardTarget()) {              // reached 0°
          Serial.println("Bottom reached – pausing …");
          flipState  = PAUSE;
          pauseStart = millis();
        }
        break;

      // ── Waiting at bottom ─────────────────────────────────────────────────
      case PAUSE:
        if (millis() - pauseStart >= flipPause) {
          Serial.println("Pause over – lowering clamps");
          setClampServo1(80);          // close right clamp
          clampServo2.write(100);      // close left clamp
          delay(clampSettle);          // ***wait while clamps settle***

          Serial.println("Clamps down – flipping up");
          flipEnd   = 190;             // top position
          flipState = UP;
        }
        break;

      // ── Moving UP ─────────────────────────────────────────────────────────
      case UP:
        if (moveTowardTarget()) {              // reached 190°
          Serial.println("Flip complete");
          digitalWrite(LED_BUILTIN, LOW);
          delay(1000);                         // optional pause before next cycle
          Serial.println("Ready for next button press");
          flipState = IDLE;
        }
        break;

      default: break;
    }
  }
}

// ─────────────────────────────────────────────────────────────────────────────
// Incrementally move flipCurrent toward flipEnd.
// Returns true once the target is reached.
bool moveTowardTarget() {
  if (abs(flipCurrent - flipEnd) <= deadzone) {
    flipCurrent = flipEnd;
    flipServo.write(flipCurrent);
    return true;
  }

  int dist       = abs(flipCurrent - flipEnd);
  int step       = (dist < flipThreshold) ? minFlipSpeed : maxFlipSpeed;
  flipCurrent   += (flipCurrent > flipEnd ? -step : step);
  flipServo.write(flipCurrent);

  return false;
}

// ─────────────────────────────────────────────────────────────────────────────
// Move clampServo1 only if the change is bigger than the deadzone
void setClampServo1(int targetAngle) {
  if (lastClamp1Pos == -1 || abs(targetAngle - lastClamp1Pos) > clamp1Deadzone) {
    clampServo1.write(targetAngle);
    Serial.print("clampServo1 moved to ");
    Serial.println(targetAngle);
    lastClamp1Pos = targetAngle;
  } else {
    Serial.print("clampServo1 ignored small move to ");
    Serial.println(targetAngle);
  }
}
