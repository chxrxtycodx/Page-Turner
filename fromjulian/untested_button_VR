#include <Servo.h>
#include <SoftwareSerial.h>
#include "VoiceRecognitionV3.h"

// Pins
#define BUTTON_PIN 2
#define CLAMP_PIN1 5
#define CLAMP_PIN2 8
#define CLAMP_PIN3 3
#define LED_BUILTIN 13

const int wheelServoIn1 = 6;
const int wheelServoIn2 = 7;
const int enablePin = 4;

// Ranger pins (currently unused)
const int trigPin = 14;
const int echoPin = 15;

// Voice recognition pins (VR module: TX->2, RX->3)
VR myVR(16, 17); // A2, A3

uint8_t buf[64];
#define onRecord    0
#define onRecord1   1 //julian off
#define offRecord   2
#define offRecord1  3 // ashley off

// Servos
Servo clampServo1;
Servo clampServo2;
Servo flipServo;

// Clamp thresholding
const int clamp1Deadzone = 3;
int lastClamp1Pos = -1;

// Flipper motion control
int flipStart = 170;
int flipEnd = 0;
int flipCurrent = 170;
bool flipping = false;
unsigned long lastFlipUpdate = 0;
const unsigned long flipInterval = 15;
const int deadzone = 10;
const int maxFlipSpeed = 10;
const int minFlipSpeed = 1;
const int flipThreshold = 15;

// Button state
bool lastButtonState = HIGH;

void setup() {
  Serial.begin(9600);
  myVR.begin(9600);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(LED_BUILTIN, OUTPUT);

  clampServo1.attach(CLAMP_PIN1);
  setClampServo1(80);
  clampServo2.attach(CLAMP_PIN2);
  clampServo2.write(100);

  flipServo.attach(CLAMP_PIN3);
  flipServo.write(flipCurrent);

  pinMode(enablePin, OUTPUT);
  pinMode(wheelServoIn1, OUTPUT);
  pinMode(wheelServoIn2, OUTPUT);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // DO NOT clear VR module memory!
  if (myVR.load((uint8_t)onRecord) >= 0)
    Serial.println("onRecord loaded");
  if (myVR.load((uint8_t)onRecord1) >= 0)
    Serial.println("onRecord1 loaded");
  if (myVR.load((uint8_t)offRecord) >= 0)
    Serial.println("offRecord loaded");
  if (myVR.load((uint8_t)offRecord1) >= 0)
    Serial.println("offRecord1 loaded");

  Serial.println("Setup complete. Waiting for trigger...");
}

void loop() {
  // Check for voice command
  int ret = myVR.recognize(buf, 50);
  if (ret > 0) {
    if (buf[1] == onRecord || buf[1] == onRecord1) {
      Serial.println("Voice command recognized - starting sequence");
      startFlipperSequence();
    } else {
      Serial.println("Voice command not assigned to flip action");
    }
  }

  // Check for button press
  bool currentButtonState = digitalRead(BUTTON_PIN);
  if (lastButtonState == HIGH && currentButtonState == LOW && !flipping) {
    Serial.println("Button pressed - starting sequence");
    startFlipperSequence();
  }
  lastButtonState = currentButtonState;

  // Handle flipping motion
  if (flipping && millis() - lastFlipUpdate >= flipInterval) {
    lastFlipUpdate = millis();

    if (abs(flipCurrent - flipEnd) <= deadzone) {
      flipCurrent = flipEnd;
      flipServo.write(flipCurrent);
      Serial.print("Reached position: ");
      Serial.println(flipEnd);

      if (flipEnd == 0 || flipEnd == 30) {
        Serial.println("Pausing at bottom position");
        delay(500);
        flipEnd = 190;
        Serial.println("Flipping back up");
      } else if (flipEnd == 190) {
        flipping = false;
        digitalWrite(LED_BUILTIN, LOW);
        Serial.println("Flip complete. Resetting clamps");
        setClampServo1(80);
        clampServo2.write(100);
        delay(1000);
        Serial.println("Clamps reset. Waiting for next trigger...");
      }
    } else {
      int distanceToTarget = abs(flipCurrent - flipEnd);
      int flipSpeed = (distanceToTarget < flipThreshold) ? minFlipSpeed : maxFlipSpeed;
      if (flipCurrent > flipEnd) {
        flipCurrent -= flipSpeed;
        if (flipCurrent < flipEnd) flipCurrent = flipEnd;
      } else {
        flipCurrent += flipSpeed;
        if (flipCurrent > flipEnd) flipCurrent = flipEnd;
      }
      flipServo.write(flipCurrent);
      Serial.print("Flipping... Current position: ");
      Serial.println(flipCurrent);
    }
  }
}

void startFlipperSequence() {
  if (flipping) return;

  digitalWrite(LED_BUILTIN, HIGH);
  setClampServo1(160);
  clampServo2.write(0);
  delay(350);

  Serial.println("Spinning wheel motor");
  digitalWrite(wheelServoIn1, HIGH);
  digitalWrite(wheelServoIn2, LOW);
  analogWrite(enablePin, 255);
  delay(1000);
  digitalWrite(wheelServoIn1, LOW);
  digitalWrite(wheelServoIn2, LOW);
  analogWrite(enablePin, 0);

  Serial.println("Starting flip");
  flipping = true;
  flipStart = flipCurrent;
  flipEnd = 0;
  lastFlipUpdate = millis();
}

void setClampServo1(int targetAngle) {
  if (lastClamp1Pos == -1 || abs(targetAngle - lastClamp1Pos) > clamp1Deadzone) {
    clampServo1.write(targetAngle);
    Serial.print("clampServo1 moved to ");
    Serial.println(targetAngle);
    lastClamp1Pos = targetAngle;
  } else {
    Serial.print("clampServo1 ignored small move to ");
    Serial.println(targetAngle);
  }
}
